// Auto-generated by some MotherTode
(() => {

			const global = window
			const scope = {}
			const term = Term.export(Term.subTerms(Term.chain(Term.term('Preprocessed', scope), Term.list([Term.term('Line', scope), Term.maybe(Term.many(Term.list([Term.string(`\\n`), Term.term('Line', scope)]))), Term.eof])), [
['Preprocessed', Term.maybe(Term.many(Term.or([
		Term.emit(Term.list([Term.string(`//`), Term.maybe(Term.many(Term.regExp(/[^\n]/)))]), ""),
		Term.regExp(/[^]/)
	])))],
['Line', Term.list([Term.maybe(Term.many(Term.regExp(/ |	/))), Term.term('Line.Instruction', scope), Term.maybe(Term.many(Term.regExp(/ |	/)))])],
['Instruction', Term.string(`hi`)],
['Constant', Term.subTerms(Term.or([Term.term('Constant.UInt', scope), Term.term('Constant.SInt', scope), Term.term('Constant.Binary', scope), Term.term('Constant.Hex', scope)]), [
['UInt', Term.check(Term.list([Term.regExp(/[1-9]/), Term.maybe(Term.many(Term.regExp(/[0-9]/)))]), (n) => n < 2**96-1)],
['SInt', Term.check(Term.list([Term.or([Term.string(`+`), Term.string(`-`)]), Term.regExp(/[1-9]/), Term.maybe(Term.many(Term.regExp(/[0-9]/)))]), (n) => n > -(2**95) && n < 2**95-1)],
['Binary', Term.list([Term.string(`0b`), Term.many(Term.or([Term.string(`0`), Term.string(`1`)]))])],
['Hex', Term.list([Term.string(`0x`), Term.many(Term.regExp(/[0-9a-f]/))])]
])],
['Register', Term.subTerms(Term.or([Term.term('Register.Random', scope), Term.term('Register.Numbered', scope)]), [
['Random', Term.string(`R?`)],
['Numbered', Term.list([Term.string(`R`), Term.or([Term.regExp(/[0-9]/), Term.list([Term.string(`1`), Term.regExp(/[0-4]/)])])])]
])],
['Symmetry', Term.or([
		Term.string(`R000L`),
		Term.string(`R090L`),
Term.string(`R180L`),
Term.string(`R270L`),
Term.string(`R000R`),
Term.string(`R090R`),
Term.string(`R180R`),
Term.string(`R270R`),
Term.string(`ALL`)
	])],
['Label', Term.list([Term.many(Term.regExp(/[a-zA-Z0-9]/)), Term.string(`:`)])]
]), global, "EWATode")
			for (const key in term) {
				scope[key] = term[key]
			}
			return term
		
})()